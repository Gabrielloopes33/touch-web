'use client';

import { useState, useEffect } from 'react';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  LineChart, Line, PieChart, Pie, Cell, ScatterChart, Scatter, ZAxis
} from 'recharts';

// Types
interface ClientData {
  id: string;
  name: string;
  email: string;
  industry: string;
  createdAt: string;
}

interface Metric {
  id: string;
  clientId: string;
  date: string;
  impressions: number;
  clicks: number;
  conversions: number;
  cost: number;
  revenue: number;
  cpc?: number;
  ctr?: number;
  cvr?: number;
  cpl?: number;
  roas?: number;
  bounce_rate?: number;
  quality_score?: number;
  frequency?: number;
}

interface Campaign {
  id: string;
  clientId: string;
  name: string;
  platform: string;
  startDate: string;
  endDate: string;
  budget: number;
  status: string;
}

interface Ad {
  id: string;
  campaignId: string;
  name: string;
  creativeType: string;
  status: string;
}

interface ClientAnalysisProps {
  clientId: string;
}

// Helper functions
const formatCurrency = (value: number): string => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(value);
};

const formatPercentage = (value: number): string => {
  return `${(value * 100).toFixed(2)}%`;
};

const formatNumber = (value: number): string => {
  return new Intl.NumberFormat('pt-BR').format(value);
};

// Color constants
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];

const ClientAnalysis = ({ clientId }: ClientAnalysisProps) => {
  const [client, setClient] = useState<ClientData | null>(null);
  const [metrics, setMetrics] = useState<Metric[]>([]);
  const [campaigns, setCampaigns] = useState<Campaign[]>([]);
  const [ads, setAds] = useState<Ad[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // For development, you can use mock data or fetch from actual APIs
        // Example fetch from API:
        // const clientResponse = await fetch(`/api/clients/${clientId}`);
        // const clientData = await clientResponse.json();
        // setClient(clientData);

        // For now, using simulated data
        // Simulated client data
        setClient({
          id: clientId,
          name: `Client ${clientId}`,
          email: `client${clientId}@example.com`,
          industry: 'E-commerce',
          createdAt: '2023-01-15'
        });

        // Simulated metrics with enhanced KPIs
        const simulatedMetrics = Array.from({ length: 12 }, (_, i) => {
          const impressions = Math.floor(Math.random() * 100000) + 10000;
          const clicks = Math.floor(Math.random() * impressions * 0.1);
          const conversions = Math.floor(Math.random() * clicks * 0.15);
          const cost = Math.random() * 5000 + 1000;
          const revenue = Math.random() * cost * (Math.random() * 3 + 0.5);
          
          // Calculate derived metrics
          const cpc = cost / clicks;
          const ctr = clicks / impressions;
          const cvr = conversions / clicks;
          const cpl = cost / conversions;
          const roas = revenue / cost;
          
          // Additional KPIs
          const bounce_rate = Math.random() * 0.6 + 0.2; // 20% to 80%
          const quality_score = Math.random() * 10; // 0 to 10
          const frequency = Math.random() * 5 + 1; // 1 to 6
          
          return {
            id: `metric-${i}`,
            clientId,
            date: new Date(2023, i, 1).toISOString(),
            impressions,
            clicks,
            conversions,
            cost,
            revenue,
            cpc,
            ctr,
            cvr,
            cpl,
            roas,
            bounce_rate,
            quality_score,
            frequency
          };
        });

        setMetrics(simulatedMetrics);

        // Simulated campaigns
        setCampaigns([
          {
            id: 'camp-1',
            clientId,
            name: 'Summer Promotion',
            platform: 'Facebook',
            startDate: '2023-06-01',
            endDate: '2023-08-31',
            budget: 5000,
            status: 'active'
          },
          {
            id: 'camp-2',
            clientId,
            name: 'Product Launch',
            platform: 'Google',
            startDate: '2023-03-15',
            endDate: '2023-12-31',
            budget: 8000,
            status: 'active'
          },
          {
            id: 'camp-3',
            clientId,
            name: 'Brand Awareness',
            platform: 'Instagram',
            startDate: '2023-01-01',
            endDate: '2023-12-31',
            budget: 3000,
            status: 'active'
          }
        ]);

        // Simulated ads
        setAds([
          {
            id: 'ad-1',
            campaignId: 'camp-1',
            name: 'Summer Sale Banner',
            creativeType: 'image',
            status: 'active'
          },
          {
            id: 'ad-2',
            campaignId: 'camp-1',
            name: 'Summer Promo Video',
            creativeType: 'video',
            status: 'active'
          },
          {
            id: 'ad-3',
            campaignId: 'camp-2',
            name: 'New Product Carousel',
            creativeType: 'carousel',
            status: 'active'
          }
        ]);

        setLoading(false);
      } catch (err) {
        console.error('Error fetching client data:', err);
        setError('Failed to fetch client data. Please try again later.');
        setLoading(false);
      }
    };

    fetchData();
  }, [clientId]);

  // Generate recommendations based on KPIs
  const generateRecommendations = () => {
    if (!metrics || metrics.length === 0) return [];

    const latestMetrics = metrics[metrics.length - 1];
    const recommendations = [];

    // Financial indicators recommendations
    if (latestMetrics.roas && latestMetrics.roas < 1) {
      recommendations.push({
        id: 'rec-1',
        type: 'warning',
        message: 'ROAS abaixo de 1. Considere revisar a estratégia de anúncios para melhorar o retorno sobre o investimento.'
      });
    }

    if (latestMetrics.cpl && latestMetrics.cpl > 100) {
      recommendations.push({
        id: 'rec-2',
        type: 'warning',
        message: 'Custo por lead elevado. Otimize a segmentação dos anúncios para reduzir custos.'
      });
    }

    // Engagement metrics recommendations
    if (latestMetrics.cvr && latestMetrics.cvr < 0.02) {
      recommendations.push({
        id: 'rec-3',
        type: 'warning',
        message: 'Taxa de conversão baixa. Considere melhorar páginas de destino e elementos de call-to-action.'
      });
    }

    if (latestMetrics.bounce_rate && latestMetrics.bounce_rate > 0.6) {
      recommendations.push({
        id: 'rec-4',
        type: 'warning',
        message: 'Taxa de rejeição elevada. Melhore a relevância do conteúdo e a experiência do usuário.'
      });
    }

    // Quality indicators recommendations
    if (latestMetrics.quality_score && latestMetrics.quality_score < 5) {
      recommendations.push({
        id: 'rec-5',
        type: 'warning',
        message: 'Quality Score baixo. Melhore a relevância dos anúncios e a experiência de landing page.'
      });
    }

    if (latestMetrics.frequency && latestMetrics.frequency > 4) {
      recommendations.push({
        id: 'rec-6',
        type: 'warning',
        message: 'Frequência elevada. Considere expandir o público-alvo para reduzir a saturação.'
      });
    }

    return recommendations;
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
        <strong className="font-bold">Error!</strong>
        <span className="block sm:inline"> {error}</span>
      </div>
    );
  }

  if (!client || metrics.length === 0) {
    return (
      <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative">
        <strong className="font-bold">Nota:</strong>
        <span className="block sm:inline"> Não há dados disponíveis para este cliente.</span>
      </div>
    );
  }

  // Calculate averages for KPIs
  const avgRoas = metrics.reduce((sum, m) => sum + (m.roas || 0), 0) / metrics.length;
  const avgCpl = metrics.reduce((sum, m) => sum + (m.cpl || 0), 0) / metrics.length;
  const avgCvr = metrics.reduce((sum, m) => sum + (m.cvr || 0), 0) / metrics.length;
  const avgBounceRate = metrics.reduce((sum, m) => sum + (m.bounce_rate || 0), 0) / metrics.length;
  const avgQualityScore = metrics.reduce((sum, m) => sum + (m.quality_score || 0), 0) / metrics.length;
  const avgFrequency = metrics.reduce((sum, m) => sum + (m.frequency || 0), 0) / metrics.length;

  // Prepare data for correlation chart between ROAS and Quality Score
  const correlationData = metrics.map(m => ({
    roas: m.roas || 0,
    quality_score: m.quality_score || 0,
    date: new Date(m.date).toLocaleDateString('pt-BR')
  }));

  const recommendations = generateRecommendations();

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Análise do Cliente: {client.name}</h1>
      
      {/* Client Info */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-8">
        <h2 className="text-xl font-semibold mb-4">Informações do Cliente</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p><span className="font-medium">ID:</span> {client.id}</p>
            <p><span className="font-medium">Nome:</span> {client.name}</p>
            <p><span className="font-medium">Email:</span> {client.email}</p>
          </div>
          <div>
            <p><span className="font-medium">Indústria:</span> {client.industry}</p>
            <p><span className="font-medium">Data de Criação:</span> {new Date(client.createdAt).toLocaleDateString('pt-BR')}</p>
          </div>
        </div>
      </div>
      
      {/* Recommendations */}
      {recommendations.length > 0 && (
        <div className="bg-white shadow-md rounded-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Recomendações</h2>
          <ul className="space-y-2">
            {recommendations.map(rec => (
              <li 
                key={rec.id}
                className={`p-3 rounded-lg ${
                  rec.type === 'warning' ? 'bg-yellow-50 border-l-4 border-yellow-400' : 'bg-green-50 border-l-4 border-green-400'
                }`}
              >
                {rec.message}
              </li>
            ))}
          </ul>
        </div>
      )}
      
      {/* KPI Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {/* Financial Indicators */}
        <div className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4">Indicadores Financeiros</h2>
          
          <div className="space-y-4">
            <div>
              <p className="text-sm text-gray-500">ROAS (Return on Ad Spend)</p>
              <p className="text-2xl font-bold">{avgRoas.toFixed(2)}x</p>
              <div className="mt-2 h-2 bg-gray-200 rounded-full">
                <div 
                  className={`h-2 rounded-full ${avgRoas >= 2 ? 'bg-green-500' : avgRoas >= 1 ? 'bg-yellow-500' : 'bg-red-500'}`} 
                  style={{ width: `${Math.min(avgRoas / 3 * 100, 100)}%` }}
                ></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">Ideal: > 2.0x</p>
            </div>
            
            <div>
              <p className="text-sm text-gray-500">CPL (Custo por Lead)</p>
              <p className="text-2xl font-bold">{formatCurrency(avgCpl)}</p>
              <div className="mt-2 h-2 bg-gray-200 rounded-full">
                <div 
                  className={`h-2 rounded-full ${avgCpl <= 50 ? 'bg-green-500' : avgCpl <= 100 ? 'bg-yellow-500' : 'bg-red-500'}`} 
                  style={{ width: `${Math.min((200 - avgCpl) / 2, 100)}%` }}
                ></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">Ideal: < R$50,00</p>
            </div>
          </div>
          
          <div className="mt-6">
            <h3 className="text-md font-semibold mb-2">Tendência ROAS</h3>
            <ResponsiveContainer width="100%" height={200}>
              <LineChart data={metrics}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis 
                  dataKey="date" 
                  tickFormatter={(date) => new Date(date).toLocaleDateString('pt-BR', { month: 'short' })}
                />
                <YAxis />
                <Tooltip formatter={(value) => value.toFixed(2)} />
                <Line type="monotone" dataKey="roas" stroke="#8884d8" activeDot={{ r: 8 }} />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
        
        {/* Engagement Metrics */}
        <div className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4">Métricas de Engajamento</h2>
          
          <div className="space-y-4">
            <div>
              <p className="text-sm text-gray-500">CVR (Taxa de Conversão)</p>
              <p className="text-2xl font-bold">{formatPercentage(avgCvr)}</p>
              <div className="mt-2 h-2 bg-gray-200 rounded-full">
                <div 
                  className={`h-2 rounded-full ${avgCvr >= 0.03 ? 'bg-green-500' : avgCvr >= 0.02 ? 'bg-yellow-500' : 'bg-red-500'}`} 
                  style={{ width: `${Math.min(avgCvr / 0.05 * 100, 100)}%` }}
                ></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">Ideal: > 3%</p>
            </div>
            
            <div>
              <p className="text-sm text-gray-500">Taxa de Rejeição</p>
              <p className="text-2xl font-bold">{formatPercentage(avgBounceRate)}</p>
              <div className="mt-2 h-2 bg-gray-200 rounded-full">
                <div 
                  className={`h-2 rounded-full ${avgBounceRate <= 0.4 ? 'bg-green-500' : avgBounceRate <= 0.6 ? 'bg-yellow-500' : 'bg-red-500'}`} 
                  style={{ width: `${Math.min((1 - avgBounceRate) * 100, 100)}%` }}
                ></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">Ideal: < 40%</p>
            </div>
          </div>
          
          <div className="mt-6">
            <h3 className="text-md font-semibold mb-2">Evolução da Taxa de Conversão</h3>
            <ResponsiveContainer width="100%" height={200}>
              <BarChart data={metrics}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis 
                  dataKey="date" 
                  tickFormatter={(date) => new Date(date).toLocaleDateString('pt-BR', { month: 'short' })}
                />
                <YAxis tickFormatter={(value) => `${(value * 100).toFixed(1)}%`} />
                <Tooltip formatter={(value) => `${(value * 100).toFixed(2)}%`} />
                <Bar dataKey="cvr" fill="#82ca9d" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
        
        {/* Quality Indicators */}
        <div className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4">Indicadores de Qualidade</h2>
          
          <div className="space-y-4">
            <div>
              <p className="text-sm text-gray-500">Quality Score</p>
              <p className="text-2xl font-bold">{avgQualityScore.toFixed(1)}/10</p>
              <div className="mt-2 h-2 bg-gray-200 rounded-full">
                <div 
                  className={`h-2 rounded-full ${avgQualityScore >= 7 ? 'bg-green-500' : avgQualityScore >= 5 ? 'bg-yellow-500' : 'bg-red-500'}`} 
                  style={{ width: `${avgQualityScore * 10}%` }}
                ></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">Ideal: > 7/10</p>
            </div>
            
            <div>
              <p className="text-sm text-gray-500">Frequência</p>
              <p className="text-2xl font-bold">{avgFrequency.toFixed(1)}</p>
              <div className="mt-2 h-2 bg-gray-200 rounded-full">
                <div 
                  className={`h-2 rounded-full ${avgFrequency <= 3 ? 'bg-green-500' : avgFrequency <= 4 ? 'bg-yellow-500' : 'bg-red-500'}`} 
                  style={{ width: `${Math.min((6 - avgFrequency) / 6 * 100, 100)}%` }}
                ></div>
              </div>
              <p className="text-xs text-gray-500 mt-1">Ideal: < 3</p>
            </div>
          </div>
          
          <div className="mt-6">
            <h3 className="text-md font-semibold mb-2">Distribuição de Quality Score</h3>
            <ResponsiveContainer width="100%" height={200}>
              <PieChart>
                <Pie
                  data={[
                    { name: '0-3', value: metrics.filter(m => (m.quality_score || 0) < 3).length },
                    { name: '4-6', value: metrics.filter(m => (m.quality_score || 0) >= 3 && (m.quality_score || 0) < 7).length },
                    { name: '7-10', value: metrics.filter(m => (m.quality_score || 0) >= 7).length }
                  ]}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {[0, 1, 2].map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={['#FF8042', '#FFBB28', '#00C49F'][index]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
      
      {/* Correlation Analysis */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-8">
        <h2 className="text-xl font-semibold mb-4">Análise de Correlação</h2>
        <p className="text-gray-600 mb-4">
          Relação entre ROAS e Quality Score - Veja como a qualidade dos seus anúncios está influenciando o retorno sobre o investimento.
        </p>
        
        <ResponsiveContainer width="100%" height={400}>
          <ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>
            <CartesianGrid />
            <XAxis 
              type="number" 
              dataKey="quality_score" 
              name="Quality Score" 
              unit="/10"
              domain={[0, 10]}
            />
            <YAxis 
              type="number" 
              dataKey="roas" 
              name="ROAS" 
              unit="x"
            />
            <Tooltip cursor={{ strokeDasharray: '3 3' }} />
            <Scatter name="ROAS vs Quality Score" data={correlationData} fill="#8884d8">
              {correlationData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Scatter>
          </ScatterChart>
        </ResponsiveContainer>
        
        <div className="mt-4 text-sm text-gray-600">
          <p>Interpretação:</p>
          <ul className="list-disc ml-5 mt-2">
            <li>Uma correlação positiva indica que anúncios com maior Quality Score tendem a ter melhor ROAS.</li>
            <li>Uma correlação fraca ou negativa pode sugerir outros fatores influenciando o ROAS além da qualidade do anúncio.</li>
          </ul>
        </div>
      </div>
      
      {/* Campaigns Summary */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-8">
        <h2 className="text-xl font-semibold mb-4">Campanhas ({campaigns.length})</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nome</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Plataforma</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Período</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Orçamento</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {campaigns.map(campaign => (
                <tr key={campaign.id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{campaign.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{campaign.platform}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {new Date(campaign.startDate).toLocaleDateString('pt-BR')} - {new Date(campaign.endDate).toLocaleDateString('pt-BR')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{formatCurrency(campaign.budget)}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      campaign.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {campaign.status === 'active' ? 'Ativa' : 'Inativa'}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default ClientAnalysis;
